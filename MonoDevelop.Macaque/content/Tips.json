{
	"id": "editor.suggestion-mode",
	"priority": "normal",
	"title": "Suggestion mode",
	"content":
"
Setting pads to auto-hide is a great way to maximize your editing space.
Double-click on the pad header to switch auto-hiding on or off.
"
}
{
	"id": "layout.auto-hide",
	"priority": "normal",
	"title": "Auto-hidden pads",
	"content":
"
Setting pads to auto-hide is a great way to maximize your editing space.
Double-click on the pad header to switch auto-hiding on or off.
"
}
{
	"id": "layout.maximize-document",
	"priority": "normal",
	"title": "Maximize the document",
	"content":
"
When you really want to focus on your code or design, you can maximize your editing space by double-clicking on the
document tab to auto-hide all the pads at once. Double-click again to switch back, or use the
[MonoDevelop.Ide.Commands.FileTabCommands.ToggleMaximize](#command) command.
"
}
{
	"id": "layout.pin-pad",
	"priority": "normal",
	"title": "Pin search pads",
	"content":
"
To preserve your search results, click on the push-pin icon to 'pin' the pad. The next search you perform will
create a new search pad.

You can pin as many pads as you want!
"
}
{
	"id": "toolbox.clipboard-history",
	"priority": "normal",
	"title": "Clipboard history",
	"content":
"
Want to use something you recently put in the clipboard with [MonoDevelop.Ide.Commands.EditCommands.Cut](#command)
or [MonoDevelop.Ide.Commands.EditCommands.Copy](#command)? The source editor keeps clipboard history in the
toolbox pad.
"
}
{
	"id": "editor.generate-code",
	"priority": "normal",
	"title": "Generate code",
	"content":
"
The [MonoDevelop.CodeGeneration.CodeGenerationCommands.ShowCodeGenerationWindow](#command) command can automatically
generate common code patterns. For example, it can generate a constructor to assign arguments to properties:

![](images/generate-code.gif)

After opening the code generation window, select a generator from the upper list with the arrow keys, then hit
[Tab](#key) to move to the lower list. Use [Space](#key) to select which items to include, then [Return](#key)
to generate the code.
"
}
{
	"id": "preferences.keybindings",
	"priority": "normal",
	"title": "Key bindings",
	"content":
"
Many commands can be activated from key bindings, which are shown beside the commands in the menus. Some commands are
not shown in the menus, and you can find these in the *Key Bindings* Preferences panel, where you can also
change or add key bindings of your own.

![](images/key-bindings.gif)
"
}
{
	"id": "solution.assemblybrowser",
	"priority": "normal",
	"title": "Assembly browser",
	"content":
"
Double-click on an assembly in your project's References to inspect its types and members with the Assembly Browser.
You can open assemblies that are not part of your project using the
[MonoDevelop.Ide.Commands.FileCommands.OpenFile](#command) command.
"
}
{
	"id": "macaque.contribute",
	"priority": "low",
	"title": "Share the love",
	"content":
"
Want to tell everyone about your favorite feature?

You can contribute tips at [mhut.ch/xs-tips](https://mhut.ch/xs-tips).
"
}
{
	"id": "macaque.moresoon",
	"priority": "low",
	"title": "Coming soon...",
	"content":
"
More tips will be coming soon!
"
}
{
	"id": "navigation.globalsearch",
	"priority": "high",
	"title": "Global Navigation",
	"content":
"
The [MonoDevelop.Components.MainToolbar.Commands.NavigateTo](#command) command allows you to quickly search and navigate your
solution and workspace.

* jump to any file, type or member in your solution
* execute commands, including hidden commands
* search for NuGet packages
* start a solution-wide full-text search

The search uses fuzzy camelCase matching, so you don't need to type the whole word. For example, `vico` or `viCo` would
match `ViewController`.

Simply type your search term, select an item from the results list using the arrow keys if necessary, and hit [Return](#key).
"
}
{
	"id": "navigation.globalsearch.prefixes",
	"priority": "high",
	"title": "Navigation filter prefixes",
	"content":
"
When using the [MonoDevelop.Components.MainToolbar.Commands.NavigateTo](#command) command, you can search for a specific kind
of result by starting your search with a filter prefix:

<table>
<tr><th>Kind     <th>Prefix       <th>Short Prefix
<tr><td>Files    <td><pre>file:   <td><pre>f:
<tr><td>Types    <td><pre>type:   <td><pre>t:
<tr><td>Members  <td><pre>member: <td><pre>m:
<tr><td>Commands <td><pre>command:<td><pre>c:
</table>


The [MonoDevelop.Ide.Commands.SearchCommands.GotoType](#command) and [MonoDevelop.Ide.Commands.SearchCommands.GotoFile](#command)
commands offer a quick way to start a search with the type or file filter prefixes.
"
}
{
	"id": "navigation.globalsearch.suffixes",
	"priority": "high",
	"title": "Navigation line suffixes",
	"content":
"
When navigating to a file using the [MonoDevelop.Components.MainToolbar.Commands.NavigateTo](#command) command,
you can jump to a specific line by suffixing your search with a colon followed by the line number.

For example, `Ma:25` could be used to jump to line 25 in the file `Main.cs`.

You can use a second suffix to specify the column, e.g. `Ma:25:10` to jump to line 25, column 10 in the file Main.cs.

You can also omit the filename to jump within the current file, e.g. `:24` to jump to line 24 in the current file.
"
}
{
	"id": "shell.taskpad",
	"priority": "normal",
	"title": "Task pad",
	"content":
"
If you have `//TODO` and `//FIXME` task comments in your code, they will show up in the
[MonoDevelop.Ide.Gui.Pads.TaskListPad](#pad) Pad.

You can add your own terms in [Preferences/TaskList](#prefs) and they will be added to the list too.
"
}